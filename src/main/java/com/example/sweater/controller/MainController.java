package com.example.sweater.controller;

import com.example.sweater.domain.Message;
import com.example.sweater.domain.User;
import com.example.sweater.repos.MessageRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

/**
 * In Springâ€™s approach to building web sites, HTTP requests are handled by a controller. You can
 * easily identify these requests by the @Controller annotation. In the following example, the
 * MainController handles GET requests for path "/" by returning the name of a View,
 * in this case, "greeting". A View is responsible for rendering the HTML content.
 */
@Controller
public class MainController {

    /**
     * This means to get the bean called userRepository which is auto-generated by Spring, we will
     * use it to handle the data.
     */
    @Autowired
    private MessageRepo messageRepo;

    /**
     * The @GetMapping annotation ensures that HTTP GET requests to / are mapped to the greeting() method.
     * @param model
     * @return
     */
    @GetMapping("/")
    public String greeting(Map<String, Object> model) {
        return "greeting";
    }

    /**
     * The @GetMapping annotation ensures that HTTP GET requests to /main are mapped to the main() method.
     *
     * The @RequestParam binds the value of the query String parameter filter into the filter parameter
     * of the main() method. This query String parameter is not required; if it is absent in the request,
     * the defaultValue of "" is used. The value of the filter parameter is added to a Model object,
     * ultimately making it accessible to the view template.
     * @param filter
     * @param model
     * @return
     */
    @GetMapping("/main")
    public String main(@RequestParam(required = false, defaultValue = "") String filter, Model model) {
        Iterable<Message> messages = messageRepo.findAll();

        if (filter != null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);
        } else {
            messages = messageRepo.findAll();
        }

        model.addAttribute("messages", messages);
        model.addAttribute("filter", filter);
        return "main";
    }

    /**
     * The @PostMapping annotation ensures that HTTP POST requests to /main are mapped to the add() method.
     * @param user
     * @param text
     * @param tag
     * @param model
     * @return
     */
    @PostMapping("/main")
    public String add(
            @AuthenticationPrincipal User user,
            @RequestParam String text,
            @RequestParam String tag, Map<String, Object> model
    ) {
        Message message = new Message(text, tag, user);

        messageRepo.save(message);

        Iterable<Message> messages = messageRepo.findAll();
        model.put("messages", messages);
        return "main";
    }

}
